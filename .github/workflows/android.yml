name: Android CI & Dynamic Release

on:
  workflow_dispatch:
    inputs:
      module:
        description: "Android module path (e.g. app)"
        required: false
        default: "app"
      create_release:
        description: "Create GitHub Release and upload artifacts?"
        required: false
        type: boolean
        default: true
      ndk_version:
        description: "Android NDK version"
        required: false
        default: "25.2.9519653"

permissions:
  contents: write
  packages: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    env:
      MODULE_PATH: ${{ inputs.module || 'app' }}
      ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
      ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
      ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
      ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
      ORG_GRADLE_PROJECT_releaseStorePassword: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
      ORG_GRADLE_PROJECT_releaseKeyAlias: ${{ secrets.ANDROID_KEY_ALIAS }}
      ORG_GRADLE_PROJECT_releaseKeyPassword: ${{ secrets.ANDROID_KEY_PASSWORD }}

    steps:
      - name: Checkout code (with submodules)
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Validate Gradle Wrapper (security)
        uses: gradle/wrapper-validation-action@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Set up Android SDK & NDK
        uses: android-actions/setup-android@v3
        with:
          ndk-version: ${{ inputs.ndk_version }}

      - name: Setup Gradle (cache)
        uses: gradle/actions/setup-gradle@v3

      - name: Debug repo & env (robust)
        shell: bash
        run: |
          echo "=== PWD ==="; pwd || true
          echo "=== Runner ==="; whoami || true; uname -a || true
          echo "=== Git ==="; git --version || true
          git rev-parse --show-toplevel 2>/dev/null || true
          git status --porcelain --branch || true
          git log -5 --pretty=format:'%h %s (%an)' || true
          ls -la || true
          sed -n '1,20p' ./gradlew || true
          echo "JAVA_HOME=${JAVA_HOME:-<unset>}"
          echo "ANDROID_HOME=${ANDROID_HOME:-<unset>}"
          java -version || true

      - name: Ensure gradle wrapper present (fallback if missing)
        if: ${{ !hashFiles('gradle/wrapper/gradle-wrapper.jar') }}
        shell: bash
        run: |
          echo "gradle-wrapper.jar missing â€” generating temporary wrapper."
          sudo apt-get update -y
          sudo apt-get install -y gradle
          gradle wrapper --gradle-version 8.11.1
          chmod +x ./gradlew

      - name: Check gradle wrapper presence
        shell: bash
        run: |
          [ -f "./gradlew" ] || { echo "gradlew missing"; exit 1; }
          [ -f "gradle/wrapper/gradle-wrapper.jar" ] || { echo "gradle-wrapper.jar missing"; exit 1; }
          echo "Gradle wrapper OK."

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Verify Gradle Wrapper
        run: ./gradlew --version

      - name: List JNI sources (debug)
        run: ls -lR nativelib/ || true

      - name: Decode keystore from secret (optional)
        if: ${{ env.ANDROID_KEYSTORE_BASE64 != '' }}
        shell: bash
        run: |
          echo "$ANDROID_KEYSTORE_BASE64" | base64 -d > keystore.jks
          echo "ANDROID_KEYSTORE_FILE=$PWD/keystore.jks" >> $GITHUB_ENV

      - name: Build with Gradle (Release)
        id: gradle_build
        shell: bash
        run: |
          set -euo pipefail
          ./gradlew :${MODULE_PATH}:clean :${MODULE_PATH}:assembleRelease :${MODULE_PATH}:bundleRelease --no-daemon --stacktrace

      - name: Collect artifacts
        id: collect
        shell: bash
        run: |
          set -euo pipefail
          ROOT="${MODULE_PATH}/build/outputs"
          mapfile -t APKs < <(find "$ROOT" -type f -name "*.apk" | sort)
          mapfile -t AABs < <(find "$ROOT" -type f -name "*.aab" | sort)
          mapfile -t MAPs < <(find "${MODULE_PATH}/build/outputs" -type f -name "mapping.txt" | sort || true)

          echo "apk_count=${#APKs[@]}" >> $GITHUB_OUTPUT
          echo "aab_count=${#AABs[@]}" >> $GITHUB_OUTPUT
          echo "map_count=${#MAPs[@]}" >> $GITHUB_OUTPUT

          {
            echo "apk_list<<EOF"
            printf "%s\n" "${APKs[@]}"
            echo "EOF"
          } >> $GITHUB_OUTPUT

          {
            echo "aab_list<<EOF"
            printf "%s\n" "${AABs[@]}"
            echo "EOF"
          } >> $GITHUB_OUTPUT

          {
            echo "map_list<<EOF"
            printf "%s\n" "${MAPs[@]}"
            echo "EOF"
          } >> $GITHUB_OUTPUT

          echo "Found APKs:"; printf " - %s\n" "${APKs[@]}" || true
          echo "Found AABs:"; printf " - %s\n" "${AABs[@]}" || true
          echo "Found mappings:"; printf " - %s\n" "${MAPs[@]}" || true

      - name: Upload APKs
        if: ${{ steps.collect.outputs.apk_count != '0' }}
        uses: actions/upload-artifact@v4
        with:
          name: release-apks
          path: |
            ${{ steps.collect.outputs.apk_list }}

      - name: Upload AABs
        if: ${{ steps.collect.outputs.aab_count != '0' }}
        uses: actions/upload-artifact@v4
        with:
          name: release-aabs
          path: |
            ${{ steps.collect.outputs.aab_list }}

      - name: Upload ProGuard/R8 mappings
        if: ${{ steps.collect.outputs.map_count != '0' }}
        uses: actions/upload-artifact@v4
        with:
          name: proguard-mappings
          path: |
            ${{ steps.collect.outputs.map_list }}

      - name: Extract versionName
        id: version
        shell: bash
        run: |
          set -euo pipefail
          VERSION=""
          for FILE in "${MODULE_PATH}/build.gradle.kts" "${MODULE_PATH}/build.gradle"; do
            if [ -f "$FILE" ]; then
              CAND=$(grep -Eo 'versionName[[:space:]]*[:=]?[[:space:]]*["'"'"'][^"'"'"']+["'"'"']' "$FILE" \
                | sed -E "s/.*['\"]([^'\"]+)['\"].*/\1/" | head -n1 || true)
              if [ -n "$CAND" ]; then VERSION="$CAND"; break; fi
            fi
          done
          if [ -z "$VERSION" ] && [ -f "${MODULE_PATH}/src/main/AndroidManifest.xml" ]; then
            VERSION=$(grep -oP 'versionName="([^"]+)"' "${MODULE_PATH}/src/main/AndroidManifest.xml" \
              | sed -E 's/versionName="([^"]+)"/\1/' | head -n1 || true)
          fi
          [ -n "$VERSION" ] || VERSION="0.0.0"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Detected versionName: $VERSION"

      - name: Set tag name (version + datetime)
        id: tag
        shell: bash
        run: |
          TAG="v${{ steps.version.outputs.version }}-$(date '+%Y%m%d-%H%M')"
          echo "tag_name=$TAG" >> $GITHUB_OUTPUT
          echo "Tag: $TAG"

      # ======== Compose Release body (English install guide, robust delimiter) ========
      - name: Compose release body (notes + install guide)
        id: release_body
        shell: bash
        run: |
          set -euo pipefail
          ROOT="${MODULE_PATH}/build/outputs"
          mapfile -t APKs < <(find "$ROOT" -type f -name "*.apk" | sort)
          mapfile -t AABs < <(find "$ROOT" -type f -name "*.aab" | sort)

          NOTES=$(git log -10 --pretty="* %s (%an)")
          APK_EXAMPLE="your-release.apk"
          AAB_EXAMPLE="your-release.aab"
          if (( ${#APKs[@]} > 0 )); then APK_EXAMPLE="$(basename "${APKs[0]}")"; fi
          if (( ${#AABs[@]} > 0 )); then AAB_EXAMPLE="$(basename "${AABs[0]}")"; fi

          DELIM="EOF_$(date +%s)_$RANDOM"

          {
            printf 'body<<%s\n' "$DELIM"
            cat <<MD
            ## What's Changed
            ${NOTES}
            
            ## Install Guide
            
            ### 1) Install an APK via ADB
            1. Enable *Developer options* and *USB debugging* on your device.
            2. Make sure the device is detected:
              \`\`\`bash
              adb devices -l
              \`\`\`
            3. Install a single APK (universal or ABI-specific):
                \`\`\`bash
                  adb install -r -g ${APK_EXAMPLE}
                  \`\`\`
                  - \`-r\` reinstalls if the app is already present; \`-g\` grants runtime permissions.
                  - Check device ABI with:
                  \`\`\`bash
                  adb shell getprop ro.product.cpu.abi
                  \`\`\`
                  (e.g., \`arm64-v8a\`).
            
              > **If you see ABI-split APKs**
              > - \`*-arm64-v8a-release.apk\`: most modern phones (64-bit ARM)
              > - \`*-x86_64-release.apk\`: emulators / some devices
              > Prefer a **universal** APK if provided.
            
            ### 2) Install from an AAB using bundletool
            An AAB cannot be installed directly. Use *bundletool* to build and install an \`.apks\` archive:
              \`\`\`bash
              # 1) Build a universal APK set
              java -jar bundletool-all.jar build-apks \
              --bundle ${AAB_EXAMPLE} \
              --output app.apks \
              --mode=universal
              
              # 2) Install to a connected device
              java -jar bundletool-all.jar install-apks --apks app.apks
              \`\`\`
            - For ABI/DPI-optimized APKs, use \`--connected-device\` or \`--device-spec\`.
            
            ### 3) Troubleshooting
            - If blocked by the OS, allow installing apps from unknown sources (device Settings).
            - Remove a conflicting install:
              \`\`\`bash
              adb uninstall <your.applicationId>
              \`\`\`
            - Inspect install errors:
              \`\`\`bash
              adb logcat | grep -i -e package -e install
              \`\`\`
            - Ensure the APK matches your device architecture (ABI).
            
            ## Assets
              MD
              for f in "${APKs[@]}"; do echo "- $(basename "$f")"; done
              for f in "${AABs[@]}"; do echo "- $(basename "$f")"; done
              printf '%s\n' "$DELIM"
              } >> "$GITHUB_OUTPUT"

      - name: Create or update Release and upload assets
        if: ${{ inputs.create_release && (steps.collect.outputs.apk_count != '0' || steps.collect.outputs.aab_count != '0') }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');
            const tag = '${{ steps.tag.outputs.tag_name }}';
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            
            function toList(multiline) {
              return (multiline || '').split('\n').map(s => s.trim()).filter(Boolean);
            }
            const apks = toList(`${{ steps.collect.outputs.apk_list }}`);
            const aabs = toList(`${{ steps.collect.outputs.aab_list }}`);
            const body = `${{ steps.release_body.outputs.body }}`;
            
            core.info(`Target tag: ${tag}`);
            core.info(`APKs: ${apks.length}, AABs: ${aabs.length}`);
            
            let release;
            try {
              const getRes = await github.rest.repos.getReleaseByTag({ owner, repo, tag });
              release = getRes.data;
              await github.rest.repos.updateRelease({
                owner, repo, release_id: release.id, body, name: `Release ${tag}`, draft: false, prerelease: false
              });
            } catch (e) {
              if (e.status === 404) {
                const createRes = await github.rest.repos.createRelease({
                  owner, repo, tag_name: tag, name: `Release ${tag}`, body, draft: false, prerelease: false
                });
                release = createRes.data;
              } else {
                throw e;
              }
            }
            
            const assetsRes = await github.rest.repos.listReleaseAssets({ owner, repo, release_id: release.id });
            const existing = new Map(assetsRes.data.map(a => [a.name, a.id]));
            async function upload(file) {
              const name = path.basename(file);
              if (existing.has(name)) {
                await github.rest.repos.deleteReleaseAsset({ owner, repo, asset_id: existing.get(name) });
              }
              const data = fs.readFileSync(file);
              await github.rest.repos.uploadReleaseAsset({
                owner, repo, release_id: release.id, name, data,
                headers: { 'content-type': 'application/octet-stream', 'content-length': data.length }
              });
              core.info(`Uploaded ${name}`);
            }
            for (const f of [...apks, ...aabs]) {
              await upload(f);
            }

      - name: Skip release (no artifacts or disabled)
        if: ${{ !inputs.create_release || (steps.collect.outputs.apk_count == '0' && steps.collect.outputs.aab_count == '0') }}
        run: echo "Release step skipped."
