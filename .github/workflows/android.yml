name: Android CI & Dynamic Release

on:
  workflow_dispatch:

permissions:
  contents: write   # release/tag の作成・削除に必要
  packages: write

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code (with submodules)
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0   # タグ情報や履歴が必要な場合は 0 を推奨

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 17

      - name: Set up Android NDK
        uses: android-actions/setup-android@v3
        with:
          ndk-version: 25.2.9519653

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties', '**/gradle/wrapper/gradle-wrapper.jar') }}
          restore-keys: |
            gradle-${{ runner.os }}

      # Robust debugging to expose repo & env state (won't fail the job)
      - name: Debug repo & env (robust)
        shell: bash
        run: |
          echo "=== PWD ==="
          pwd || true

          echo "=== Whoami / Runner info ==="
          whoami || true
          uname -a || true

          echo "=== List repo root (short) ==="
          ls -la || true

          echo "=== Git info ==="
          git --version || true
          echo "Git rev-parse toplevel:"
          git rev-parse --show-toplevel 2>/dev/null || true
          echo "Git branch / status (porcelain):"
          git status --porcelain --branch || true
          echo "Recent commits:"
          git log -5 --pretty=format:'%h %s (%an)' || true

          echo "=== Gradle / wrapper files ==="
          echo "List gradle dir:"
          ls -la gradle || true
          echo "List gradle/wrapper dir:"
          ls -la gradle/wrapper || true
          echo "Check gradlew file:"
          if [ -f "./gradlew" ]; then
            ls -la ./gradlew || true
            echo "Attempt to show first lines of gradlew:"
            sed -n '1,20p' ./gradlew || true
          else
            echo "gradlew not found at repo root"
          fi

          echo "=== Check for wrapper jar tracked/ignored ==="
          git ls-files --error-unmatch gradle/wrapper/gradle-wrapper.jar 2>/dev/null && echo "gradle-wrapper.jar is tracked" || echo "gradle-wrapper.jar is NOT tracked or not present"
          git check-ignore -v gradle/wrapper/gradle-wrapper.jar 2>/dev/null || echo "git check-ignore returned nothing (not ignored or git not available)"

          echo "=== Env vars of interest ==="
          echo "JAVA_HOME=${JAVA_HOME:-<unset>}"
          echo "ANDROID_HOME=${ANDROID_HOME:-<unset>}"
          echo "GITHUB_WORKSPACE=${GITHUB_WORKSPACE:-<unset>}"
          echo "RUNNER_OS=${RUNNER_OS:-<unset>}"

          echo "=== Java / Gradle (if present) ==="
          java -version || true
          if [ -x "./gradlew" ]; then
            ./gradlew --version || true
          else
            echo "./gradlew not executable or not present"
          fi

          echo "=== End debug ==="

      # If gradle wrapper jar is missing, generate a wrapper temporarily in CI (fallback)
      - name: Ensure gradle wrapper present (generate fallback if missing)
        shell: bash
        run: |
          if [ -f "./gradle/wrapper/gradle-wrapper.jar" ]; then
            echo "gradle-wrapper.jar already present"
          else
            echo "gradle-wrapper.jar missing — generating a temporary wrapper (CI fallback)"
            sudo apt-get update -y
            sudo apt-get install -y gradle
            # Use a Gradle version compatible with AGP 8.10.x (recommended to commit wrapper later)
            gradle wrapper --gradle-version 8.11.1
            chmod +x ./gradlew || true
          fi

      # --- sanity checks for the wrapper ---
      - name: Check gradle wrapper presence
        shell: bash
        run: |
          echo "Checking gradlew and gradle wrapper..."
          if [ ! -f "./gradlew" ]; then
            echo "ERROR: gradlew not found in repository root."
            ls -la
            exit 1
          fi
          if [ ! -f "gradle/wrapper/gradle-wrapper.jar" ]; then
            echo "ERROR: gradle/wrapper/gradle-wrapper.jar not found. Please commit the wrapper jar."
            exit 1
          fi
          echo "Gradle wrapper files present."

      - name: Grant execute permission for gradlew (safe)
        run: chmod +x ./gradlew

      - name: Verify Gradle Wrapper
        run: ./gradlew --version

      - name: List JNI sources (debug)
        run: ls -lR nativelib/ || true

      # Build step (adjust working-directory if your android module is in a subfolder)
      - name: Build with Gradle (Release)
        id: gradle_build
        shell: bash
        run: |
          set -e
          ./gradlew assembleRelease --no-daemon
        # working-directory: ./app   # <- もしプロジェクトがサブフォルダにあるときは有効化

      - name: Ensure APK exists (set output)
        id: apk_check
        shell: bash
        run: |
          APK_PATH="app/build/outputs/apk/release/app-release.apk"
          if [ -f "$APK_PATH" ]; then
            echo "apk_path=$APK_PATH" >> $GITHUB_OUTPUT
            echo "apk_exists=true" >> $GITHUB_OUTPUT
          else
            echo "apk_exists=false" >> $GITHUB_OUTPUT
            echo "Warning: APK was not found at $APK_PATH"
          fi

      - name: Upload APK (Release) as artifact (if exists)
        if: ${{ steps.apk_check.outputs.apk_exists == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: app-release-apk
          path: ${{ steps.apk_check.outputs.apk_path }}

      # Extract versionName from files
      - name: Extract versionName from files
        id: version
        shell: bash
        run: |
          set -e
          VERSION=""
          # Try build.gradle(.kts)
          for FILE in app/build.gradle.kts app/build.gradle; do
            if [ -f "$FILE" ]; then
              VERSION=$(grep -Eo 'versionName[[:space:]]*[:=]?[[:space:]]*["'"'"'][^"'"'"']+["'"'"']' "$FILE" | sed -E "s/.*['\"]([^'\"]+)['\"].*/\1/" | head -n1 || true)
              if [ -n "$VERSION" ]; then break; fi
            fi
          done

          # Fallback: AndroidManifest.xml
          if [ -z "$VERSION" ] && [ -f "app/src/main/AndroidManifest.xml" ]; then
            VERSION=$(grep -oP 'versionName="([^"]+)"' app/src/main/AndroidManifest.xml | sed -E 's/versionName="([^"]+)"/\1/' | head -n1 || true)
          fi

          # Final fallback: try Gradle task (if project defines one)
          if [ -z "$VERSION" ]; then
            VERSION=$(./gradlew -q -PprintVersion=true printVersion 2>/dev/null || true)
          fi

          if [ -z "$VERSION" ]; then
            echo "Could not determine versionName; defaulting to '0.0.0'"
            VERSION="0.0.0"
          fi

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Detected version: $VERSION"

      - name: Set tag name (version + datetime)
        id: tag
        shell: bash
        run: |
          TAG="v${{ steps.version.outputs.version }}-$(date '+%Y%m%d-%H%M')"
          echo "tag_name=$TAG" >> $GITHUB_OUTPUT

      - name: Get last 10 commits
        id: get_commits
        shell: bash
        run: |
          git log -10 --pretty="* %s (%an)" > commit_notes.txt
          echo "notes<<EOF" >> $GITHUB_ENV
          cat commit_notes.txt >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      # Create or reuse release and upload APK (handles existing tag/release gracefully)
      - name: Create or update Release and upload APK (robust)
        if: ${{ steps.apk_check.outputs.apk_exists == 'true' }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');
            const core = require('@actions/core');

            const tag = '${{ steps.tag.outputs.tag_name }}';
            const filePath = '${{ steps.apk_check.outputs.apk_path }}';
            const owner = context.repo.owner;
            const repo = context.repo.repo;

            core.info(`Target tag: ${tag}`);
            core.info(`APK path: ${filePath}`);

            if (!fs.existsSync(filePath)) {
              core.setFailed(`APK not found at ${filePath}`);
              return;
            }

            // 1) try to get release by tag
            let release;
            try {
              const getRes = await github.rest.repos.getReleaseByTag({ owner, repo, tag });
              release = getRes.data;
              core.info(`Found existing release id=${release.id} for tag ${tag}`);
            } catch (e) {
              if (e.status === 404) {
                core.info(`No release for tag ${tag}; creating new release.`);
                const createRes = await github.rest.repos.createRelease({
                  owner, repo,
                  tag_name: tag,
                  name: `Release ${tag}`,
                  body: process.env.notes || '',
                  draft: false,
                  prerelease: false
                });
                release = createRes.data;
                core.info(`Created release id=${release.id}`);
              } else {
                throw e;
              }
            }

            // 2) ensure there's no conflicting asset with same name
            const fileName = path.basename(filePath);
            const assetsRes = await github.rest.repos.listReleaseAssets({
              owner, repo, release_id: release.id
            });
            const existing = assetsRes.data.find(a => a.name === fileName);
            if (existing) {
              core.info(`Deleting existing asset id=${existing.id} name=${existing.name}`);
              await github.rest.repos.deleteReleaseAsset({
                owner, repo, asset_id: existing.id
              });
            }

            // 3) upload the apk
            const fileData = fs.readFileSync(filePath);
            await github.rest.repos.uploadReleaseAsset({
              owner,
              repo,
              release_id: release.id,
              name: fileName,
              data: fileData,
              headers: {
                'content-type': 'application/vnd.android.package-archive',
                'content-length': fileData.length
              }
            });
            core.info(`Uploaded ${fileName} to release ${release.id}`);

      # If APK missing, skip release creation but still finish job cleanly
      - name: Skip release (APK missing)
        if: ${{ steps.apk_check.outputs.apk_exists != 'true' }}
        run: |
          echo "APK not found; skipping release creation/upload."
